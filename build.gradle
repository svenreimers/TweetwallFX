/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2022 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.google.gradle', name: 'osdetector-gradle-plugin', version: '1.7.0'
        classpath group: 'com.diffplug.spotless', name: 'spotless-plugin-gradle', version: '6.4.0'
        classpath group: 'com.github.ben-manes', name: 'gradle-versions-plugin', version: '0.42.0'
        classpath group: 'com.netflix.nebula', name: 'nebula-publishing-plugin', version: '18.4.0'
        classpath group: 'com.github.spotbugs.snom', name: 'spotbugs-gradle-plugin', version: '5.0.6'
        classpath group: 'net.ltgt.gradle', name: 'gradle-errorprone-plugin', version: '2.0.2'
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '3.3'

        classpath group: 'com.netflix.nebula', name: 'gradle-info-plugin', version: '11.3.3'
        // VCS dependency required by plugin 'gradle-info-plugin'
        classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '6.1.0.202203080745-r'
    }
}

apply plugin: 'base'
apply plugin: 'build-dashboard'
apply plugin: 'org.sonarqube'
apply plugin: 'com.google.osdetector'

// applying Versions plugin
apply plugin: 'com.github.ben-manes.versions'

ext {
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}

allprojects {
    group = 'org.tweetwallfx'
    version = currentVersion
    description = 'JavaFX based Tweetwall (' + name + ')'

    repositories {
        jcenter()
    }

    // configuring Spotless
    apply plugin: "com.diffplug.spotless"

    afterEvaluate {
        spotless {
            if (!System.env.CI) {
                // https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
                // only format files which have changed since this ref
                // TODO: Figure out a way to get this working in CI (i.e. Github Workflows)
                ratchetFrom 'origin/master'
            }

            format 'textBasedFiles', {
                target(
                    '*.gradle',
                    '**/*.asciidoc',
                    '**/*.adoc',
                    '**/*.asc',
                    '**/*.css',
                    '**/*.json',
                    '**/*.md',
                    '**/*.properties',
                    '.gitignore',
                )

                trimTrailingWhitespace()
                indentWithSpaces(4)
                endWithNewline()
            }

            def closure = {
                trimTrailingWhitespace()
                indentWithSpaces(4)
                endWithNewline()
//                importOrder(
//                    '\\#',    // static imports
//                    'java',   // classes from java root package
//                    'javax',  // classes from javax root package
//                    '',       // any other import
//                )
                replaceRegex 'noStarImports', /\nimport (static )?[a-zA-Z0-9.]*[.][\*];\n/, '\n'
                replaceRegex 'noMultipleEmptyLines', '\n{3,}', '\n\n'
                replaceRegex 'Remove @author javadoc taglets.', '\n\\s*\\*\\s*@author.*', ''
                replaceRegex 'Remove trailing empty comment lines.', '\n\\s*\\*(\n\\s*\\*/\n)', '$1'
                replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
                licenseHeaderFile rootProject.file('LICENSE.spotlessTemplate')
            }

            if (plugins.hasPlugin(org.gradle.api.plugins.GroovyPlugin)) {
                groovy(closure)
            } else if (plugins.hasPlugin(org.gradle.api.plugins.JavaPlugin)) {
                java(closure)
            }
        }

        check.dependsOn(spotlessCheck)
    }

    // now configuring for projects that coontain code not just structuring the project
    if (childProjects.isEmpty()) {
        // configuring standard java project
        apply plugin: 'java-library'
        apply plugin: 'idea'
        apply plugin: 'jacoco'
        apply plugin: 'eclipse'
        apply plugin: 'nebula.info'
        apply plugin: 'maven-publish'

        jacoco {
            toolVersion = '0.8.7'
        }

        configurations {
            javafx
            jaxb

            all {
                resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == 'com.fasterxml.jackson' &&
                        details.requested.name == 'jackson-bom' &&
                        details.requested.version == '2.13.2.1') {
                        details.useVersion '2.13.2.20220324'
                        details.because 'fixes CVE-2020-36518 and resolved version does not (pom) match expectation'
                    }
                }
            }
        }

        dependencies {
            javafx group: 'org.openjfx', name: 'javafx-base', version: '18', classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-graphics', version: '18', classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-fxml', version: '18', classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-controls', version: '18', classifier: javaFxPlatform

            jaxb group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.1.0'
            jaxb group: 'org.eclipse.angus', name: 'angus-activation', version: '1.0.0'
            jaxb group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.1'
            jaxb group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'

            testImplementation group: 'junit', name: 'junit', version: '4.13.2'
            testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.22.0'
        }

        ext {
            getJvmModulePath = { -> (configurations.javafx + configurations.jaxb).asPath}
            getJvmAdditionalModules = { ->
                [
                    'jakarta.activation',
                    'jakarta.xml.bind',
                    'javafx.controls',
                    'javafx.graphics',
                    'javafx.fxml'
                ].toUnique().toSorted().join(',')
            }
        }

        tasks.named('jar') {
            manifest.attributes provider: 'gradle'
        }

        tasks.named('javadoc') {
            options.addStringOption('-module-path', getJvmModulePath())
            options.addStringOption('-add-modules', getJvmAdditionalModules())
            enabled = false // TODO: reenable (currently breaks build with ClassCastException)
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs.addAll([
                    '-Xlint:-preview',
                    '--enable-preview',
                    '-Werror',
                    '-proc:none',
                    '--module-path',
                    getJvmModulePath(),
                    '--add-modules',
                    getJvmAdditionalModules(),
            ])
        }

        tasks.withType(JavaExec) {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
        }

        tasks.withType(Test) {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
        }

        tasks.named('check') {
            dependsOn 'javadoc'
        }

        if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_18)) {
            // jacoco not yet compatible with JDK18
            tasks.named('test') {
                finalizedBy 'jacocoTestReport'
            }
        }

        // configuring Errorprone
        if (!JavaVersion.current().isJava12Compatible()) {
            apply plugin: 'net.ltgt.errorprone'

            dependencies {
                errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.11.0'
            }
        }

        // configuring Spotbugs
        apply plugin: 'com.github.spotbugs'

        spotbugs {
            // fail build in case a failure was detected
            ignoreFailures = false
            jvmArgs.add '--module-path'
            jvmArgs.add getJvmModulePath()
            jvmArgs.add '--add-modules'
            jvmArgs.add getJvmAdditionalModules()
        }

        tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
            reports {
                xml.required.set(false)
                html.required.set(true)
            }

            auxClassPaths = auxClassPaths + configurations.javafx + configurations.jaxb
        }

        // configuring Versions plugin
        dependencyUpdates {
            outputFormatter = 'plain,html'
            gradleReleaseChannel = 'current'

            resolutionStrategy {
                componentSelection { rules ->
                    rules.all { ComponentSelection selection ->
                        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
                            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
                        }
                        if (rejected) {
                            selection.reject('Release candidate')
                        }
                    }
                }
            }
        }

        apply plugin: 'nebula.maven-publish'
        apply plugin: 'nebula.javadoc-jar'
        apply plugin: 'nebula.source-jar'
        apply plugin: 'nebula.publish-verification'
    }

    plugins.withType(org.gradle.api.plugins.GroovyPlugin) {
        dependencies {
            implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.10'
            testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.1-groovy-3.0'
        }
    }

    tasks.withType(org.gradle.api.tasks.testing.Test) {
        systemProperty 'org.tweetwallfx.tests.executeCFPClientLiveTests', executeCFPClientLiveTests
    }
}

tasks.register('createFolders') {
    description = 'Creates the folders for the projects and sourceSets should they not exist.'

    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            println 'Creating project folder: ' + p.getProjectDir()
            p.getProjectDir().mkdirs()
        }

        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    println 'Creating source folder: ' + srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}
