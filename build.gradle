/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2022 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.diffplug.spotless', name: 'spotless-plugin-gradle', version: versionSpotless
        classpath group: 'com.github.ben-manes', name: 'gradle-versions-plugin', version: '0.42.0'
        classpath group: 'com.jfrog.bintray.gradle', name: 'gradle-bintray-plugin', version: versionGradleBintrayPlugin
        classpath group: 'com.netflix.nebula', name: 'gradle-info-plugin', version: '5.2.0'
        classpath group: 'com.netflix.nebula', name: 'nebula-publishing-plugin', version: versionNebulaPublishingPlugin
        classpath group: 'gradle.plugin.com.github.spotbugs', name: 'spotbugs-gradle-plugin', version: '2.0.0'

        if (JavaVersion.current().isJava11Compatible()) {
            classpath group: 'net.ltgt.gradle', name: 'gradle-errorprone-plugin', version: '2.0.2'
        } else {
            throw new GradleException("Building with Java major version prior to 11 is not supported.")
        }

        // VCS dependency required by plugin 'gradle-info-plugin'
        classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: versionJGit
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: versionSonarqubeGradlePlugin
        classpath group: 'com.google.gradle', name: 'osdetector-gradle-plugin', version: '1.7.0'
    }
}

apply plugin: 'build-dashboard'
apply plugin: 'org.sonarqube'
apply plugin: 'com.google.osdetector'

// applying Versions plugin
apply plugin: 'com.github.ben-manes.versions'

ext {
    releaseDate = new Date()
    bintrayEnabled = \
        ('false' != System.getenv('TRAVIS_PULL_REQUEST')) &&
        null != findProperty('BINTRAY_USER') &&
        null != findProperty('BINTRAY_KEY')
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}

allprojects {
    group = 'org.tweetwallfx'
    version = currentVersion
    description = 'JavaFX based Tweetwall (' + name + ')'

    repositories {
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                // workaround for spotbugs not yet supporting JDK 13 class formats
                substitute module('org.ow2.asm:asm')  with module ("org.ow2.asm:asm:${versionAsm}")
            }
        }
    }
    // configuring Spotless
    apply plugin: "com.diffplug.gradle.spotless"

    spotless {
        format 'textBasedFiles', {
            target fileTree(project.rootDir) {
                include '**/*.gradle'
                include '**/*.asciidoc'
                include '**/*.adoc'
                include '**/*.asc'
                include '**/*.css'
                include '**/*.json'
                include '**/*.md'
                include '**/*.properties'
                include '**/.gitignore'
                exclude '**/.gradle/**'
                exclude '**/build/**'
            }

            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        format 'javaFiles', {
            target fileTree(project.rootDir) {
                include '**/*.java'
                include '**/*.groovy'
            }

            paddedCell()
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
            custom('noStarImports', {fileContent -> fileContent.replaceAll(/\nimport (static )?[a-zA-Z0-9.]*[.][\*];\n/, '\n')})
            custom('noMultipleEmptyLines', {fileContent -> fileContent.replaceAll('\n{3,}', '\n\n')})
            custom('noEmptyLineBeforeClosingBrace', {fileContent -> fileContent.replaceAll(/\n+(\n *[\}])/, '$1')})
        }
    }

    afterEvaluate {
        check.dependsOn(spotlessCheck)
    }

    // now configuring for projects that coontain code not just structuring the project
    if (childProjects.isEmpty()) {
        // configuring standard java project
        apply plugin: 'java-library'
        apply plugin: 'idea'
        apply plugin: 'jacoco'
        apply plugin: 'eclipse'
        apply plugin: 'nebula.info'
        apply plugin: 'maven-publish'

        configurations {
            javafx
            jaxb
        }

        dependencies {
            javafx group: 'org.openjfx', name: 'javafx-base', version: versionJavaFx, classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-graphics', version: versionJavaFx, classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-fxml', version: versionJavaFx, classifier: javaFxPlatform
            javafx group: 'org.openjfx', name: 'javafx-controls', version: versionJavaFx, classifier: javaFxPlatform

            jaxb group: 'com.sun.activation', name: 'javax.activation', version: versionJavaActivation
            jaxb group: 'javax.xml.bind', name: 'jaxb-api', version: versionJaxB
            jaxb group: 'com.sun.xml.bind', name: 'jaxb-impl', version: versionJaxB

            testImplementation group: 'junit', name: 'junit', version: '4.13.2'
            testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.+'
        }

        jar {
            manifest.attributes provider: 'gradle'
        }

        javadoc {
            if (JavaVersion.current().isJava11Compatible()) {
                afterEvaluate {
                    def additionalModules = (configurations.javafx + configurations.jaxb)
                    options.addStringOption('-module-path', additionalModules.asPath)
                    options.addStringOption('-add-modules', 'java.activation,java.xml.bind,javafx.controls,javafx.graphics,javafx.fxml')
                }
            }
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs.addAll([
                    '-Xlint:all',
                    '-Werror',
                    '-proc:none',
            ])

            if (JavaVersion.current().isJava11Compatible()) {
                afterEvaluate {
                    def additionalModules = (configurations.javafx + configurations.jaxb)
                    options.compilerArgs.addAll([
                            '--module-path',
                            additionalModules.asPath,
                            '--add-modules',
                            'java.activation,java.xml.bind,javafx.controls,javafx.graphics,javafx.fxml',
                    ])
                }
            }
        }

        tasks.withType(JavaExec) {
            if (JavaVersion.current().isJava11Compatible()) {
                afterEvaluate {
                    def additionalModules = (configurations.javafx + configurations.jaxb)
                    jvmArgs '--module-path'
                    jvmArgs additionalModules.asPath
                    jvmArgs '--add-modules'
                    jvmArgs 'java.activation,java.xml.bind,javafx.controls,javafx.graphics,javafx.fxml'
                }
            }
        }

        tasks.withType(Test) {
            if (JavaVersion.current().isJava11Compatible()) {
                afterEvaluate {
                    def additionalModules = (configurations.javafx + configurations.jaxb)
                    jvmArgs '--module-path'
                    jvmArgs additionalModules.asPath
                    jvmArgs '--add-modules'
                    jvmArgs 'java.activation,java.xml.bind,javafx.controls,javafx.graphics,javafx.fxml'
                }
            }
        }

        check {
            dependsOn 'javadoc'
        }

        // configuring Errorprone
        if (!JavaVersion.current().isJava12Compatible()) {
            apply plugin: 'net.ltgt.errorprone'

            dependencies {
                if (JavaVersion.current().isJava11Compatible()) {
                    errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.11.0'
                } else {
                    throw new GradleException("Building with Java major version prior to 11 is not supported.")
                }
            }
        }

        // configuring Spotbugs
        apply plugin: 'com.github.spotbugs'

        spotbugs {
            ignoreFailures = false
        }

        tasks.withType(com.github.spotbugs.SpotBugsTask) {
            // Workaround to bug https://github.com/spotbugs/spotbugs/issues/440
            def sourceSetName = (name - 'spotbugs').uncapitalize()
            dependsOn( sourceSets[sourceSetName].classesTaskName)

            reports {
                xml.enabled = false
                html.enabled = true
            }

            if (JavaVersion.current().isJava11Compatible()) {
                afterEvaluate {
                    classpath = (classpath + configurations.javafx)
                }
            }
        }

        // configuring Versions plugin
        dependencyUpdates {
            outputFormatter = 'plain,html'
            gradleReleaseChannel = 'current'

            resolutionStrategy {
                componentSelection { rules ->
                    rules.all { ComponentSelection selection ->
                        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
                            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
                        }
                        if (rejected) {
                            selection.reject('Release candidate')
                        }
                    }
                }
            }
        }

        apply plugin: 'nebula.maven-publish'
        apply plugin: 'nebula.javadoc-jar'
        apply plugin: 'nebula.source-jar'
        apply plugin: 'nebula.publish-verification'

        // configuring Bintray Upload
        apply plugin: 'com.jfrog.bintray'
        bintray {
            user = findProperty('BINTRAY_USER') // null if not found
            key = findProperty('BINTRAY_KEY') // null if not found

            dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
            publish = false //[Default: false] Whether version should be auto published after an upload
            override = project.version.endsWith('-SNAPSHOT') //[Default: false] Whether to override version artifacts already published

            publications = ['nebula']

            pkg {
                repo = 'maven'
                name = rootProject.group
                userOrg = 'tweetwallfx-team'
                desc = project.description

                websiteUrl = 'https://github.com/TweetWallFX/TweetwallFX'
                issueTrackerUrl = 'https://github.com/TweetWallFX/TweetwallFX/issues'
                vcsUrl = 'https://github.com/TweetWallFX/TweetwallFX.git'

                licenses = ['MIT']

                labels = ['tweetwall', 'javafx']
                publicDownloadNumbers = false
                //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes

                githubRepo = 'TweetWallFX/TweetwallFX' //Optional Github repository
                githubReleaseNotesFile = 'README.adoc'      //Optional Github readme file

                version {
                    name = project.version
                    desc = "Tweetwall FX ${project.version}"
                    released = releaseDate
                    vcsTag = project.version
                    //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']

                    //Optional configuration for Maven Central sync of the version
                    mavenCentralSync {
                        sync = false //[Default: true] Determines whether to sync the version to Maven Central.
                        // user = 'userToken' //OSS user token: mandatory
                        // password = 'paasword' //OSS user password: mandatory
                        // close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                    }
                }
            }
        }

        bintrayUpload.enabled = bintrayEnabled
        bintrayPublish.enabled = bintrayEnabled
    }

    plugins.withType(org.gradle.api.plugins.GroovyPlugin) {
        dependencies {
            compile group: 'org.codehaus.groovy', name: 'groovy-all', version: versionGroovy
            testCompile group: 'org.spockframework', name: 'spock-core', version: versionSpockFramework
        }
    }

    tasks.withType(org.gradle.api.tasks.testing.Test) {
        systemProperty 'org.tweetwallfx.tests.executeCFPClientLiveTests', executeCFPClientLiveTests
    }
}

task createFolders(description: 'Creates the folders for the projects and sourceSets should they not exist.') doLast {
    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            println 'Creating project folder: ' + p.getProjectDir()
            p.getProjectDir().mkdirs()
        }

        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    println 'Creating source folder: ' + srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}
